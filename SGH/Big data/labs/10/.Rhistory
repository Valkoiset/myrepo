Wald1.sarlm(model2a)
model2b <-
stsls(Deaths ~ Popultn + Fertlty, listw = W_list)
summary(model2b)
View(map)
any(is.na(map))
map <- na.omit(map)
any(is.na(map))
map <- na.omit(map)
model2b <-
stsls(Deaths ~ Popultn + Fertlty, listw = W_list)
summary(model2b)
# SAR: Spatial Lag - ML and TSLS
model2a <- lagsarlm(deathspp ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model2a)
res2a <- model2a$residuals
moran.test(res2a, listw = W_list, zero.policy = T)
# Tests for rho (LR and Wald) can be computed individually:
LR1.sarlm(model2a)
Wald1.sarlm(model2a)
any(is.na(map))
map <- na.omit(map)
model2b <-
stsls(Deaths ~ Popultn + Fertlty, listw = W_list)
summary(model2b)
rm(list = ls())
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home5")
# Map of Germany with already chosen and merged variables x (Deaths (number of
# deaths in each region in 2017)) and y (Population) and Fertility rate
map <-
readOGR(dsn = "spatial_data",
layer = "spatial_final",
stringsAsFactors = F)
map <- spTransform(map, "+proj=longlat")
# Remove all NA's in rows (and associated points)
sp.na.omit <- function(map, margin=1) {
if (!inherits(map, "SpatialPointsDataFrame") &
!inherits(map, "SpatialPolygonsDataFrame"))
stop("MUST BE sp SpatialPointsDataFrame OR SpatialPolygonsDataFrame CLASS OBJECT")
na.index <- unique(as.data.frame(which(is.na(map@data),
arr.ind=TRUE))[,margin])
if(margin == 1) {
cat("DELETING ROWS: ", na.index, "\n")
return( map[-na.index,]  )
}
if(margin == 2) {
cat("DELETING COLUMNS: ", na.index, "\n")
return( map[,-na.index]  )
}
}
map <- sp.na.omit(map)
plot(map)
View(map)
# Map of Germany with already chosen and merged variables x (Deaths (number of
# deaths in each region in 2017)) and y (Population) and Fertility rate
map <-
readOGR(dsn = "spatial_data",
layer = "spatial_final",
stringsAsFactors = F)
map <- spTransform(map, "+proj=longlat")
# Remove all NA's in rows (and associated points)
sp.na.omit <- function(map, margin=1) {
if (!inherits(map, "SpatialPointsDataFrame") &
!inherits(map, "SpatialPolygonsDataFrame"))
stop("MUST BE sp SpatialPointsDataFrame OR SpatialPolygonsDataFrame CLASS OBJECT")
na.index <- unique(as.data.frame(which(is.na(map@data),
arr.ind=TRUE))[,margin])
if(margin == 1) {
cat("DELETING ROWS: ", na.index, "\n")
return( map[-na.index,]  )
}
if(margin == 2) {
cat("DELETING COLUMNS: ", na.index, "\n")
return( map[,-na.index]  )
}
}
rm(list = ls())
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home5")
# Map of Germany with already chosen and merged variables x (Deaths (number of
# deaths in each region in 2017)) and y (Population) and Fertility rate
map <-
readOGR(dsn = "spatial_data",
layer = "spatial_final",
stringsAsFactors = F)
map <- spTransform(map, "+proj=longlat")
plot(map)
sgh_green <- rgb(13, 85, 72, 160, names = NULL, maxColorValue = 255)
# Visualise the number of Deaths in regions
pal <- colorRampPalette(c("white", sgh_green), bias = 1)
spplot(
map,
zcol = "Deaths",
colorkey = TRUE,
col.regions = pal(100),
cuts = 99,
cex = 0.5,
par.settings = list(axis.line = list(col =  'transparent')),
main = "Deaths"
)
# Number of deaths per 1000 people
map@data$deathspp <- map@data$Deaths / map@data$Popultn * 1000
is.na(map)
coordinates(map)
rm(list = ls())
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home5")
# Map of Germany with already chosen and merged variables x (Deaths (number of
# deaths in each region in 2017)) and y (Population) and Fertility rate
map <-
readOGR(dsn = "spatial_data",
layer = "spatial_final",
stringsAsFactors = F)
map <- spTransform(map, "+proj=longlat")
coordinates(map)
plot(map)
sgh_green <- rgb(13, 85, 72, 160, names = NULL, maxColorValue = 255)
# Visualise the number of Deaths in regions
pal <- colorRampPalette(c("white", sgh_green), bias = 1)
spplot(
map,
zcol = "Deaths",
colorkey = TRUE,
col.regions = pal(100),
cuts = 99,
cex = 0.5,
par.settings = list(axis.line = list(col =  'transparent')),
main = "Deaths"
)
# Number of deaths per 1000 people
map@data$deathspp <- map@data$Deaths / map@data$Popultn * 1000
is.na(map)
thresholds <- c(seq(9, 13, 0.5))
spplot(
map,
zcol = "deathspp",
colorkey = list(labels = list(
breaks = seq(10, length(thresholds)), labels = thresholds
)),
col.regions = rainbow(99, start = 0.1),
cuts = length(thresholds),
cex = 0.5,
par.settings = list(axis.line = list(col =  'transparent')),
main = "Number of deaths per 1000 people"
)
attach(map@data)
library(spdep)
cont <- poly2nb(map, queen = T)
W_list <- nb2listw(cont, style = "W", zero.policy = T)
# Linear model
model1 <-
lm(deathspp ~ Popultn + Fertlty) # deaths per 1000 people explained by
# population and fertility rate
summary(model1)
lm.morantest(model1, listw = W_list, zero.policy = T)
lm.LMtests(model1, listw = W_list, test = "all", zero.policy = T)
# SAR: Spatial Lag - ML and TSLS
model2a <- lagsarlm(deathspp ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model2a)
res2a <- model2a$residuals
moran.test(res2a, listw = W_list, zero.policy = T)
# Tests for rho (LR and Wald) can be computed individually:
LR1.sarlm(model2a)
Wald1.sarlm(model2a)
model2b <-
stsls(Deaths ~ Popultn + Fertlty, listw = W_list)
summary(model2b)
res2b <- model2b$residuals
View(map)
# Remove all NA's in rows (and associated points)
sp.na.omit <- function(map, margin=0) {
if (!inherits(map, "SpatialPointsDataFrame") &
!inherits(map, "SpatialPolygonsDataFrame"))
stop("MUST BE sp SpatialPointsDataFrame OR SpatialPolygonsDataFrame CLASS OBJECT")
na.index <- unique(as.data.frame(which(is.na(map@data),
arr.ind=TRUE))[,margin])
if(margin == 1) {
cat("DELETING ROWS: ", na.index, "\n")
return( map[-na.index,]  )
}
if(margin == 2) {
cat("DELETING COLUMNS: ", na.index, "\n")
return( map[,-na.index]  )
}
}
map <- sp.na.omit(map)
rm(list = ls())
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home5")
# Map of Germany with already chosen and merged variables x (Deaths (number of
# deaths in each region in 2017)) and y (Population) and Fertility rate
map <-
readOGR(dsn = "spatial_data",
layer = "spatial_final",
stringsAsFactors = F)
map <- spTransform(map, "+proj=longlat")
# Remove all NA's in rows (and associated points)
sp.na.omit <- function(map, margin=2) {
if (!inherits(map, "SpatialPointsDataFrame") &
!inherits(map, "SpatialPolygonsDataFrame"))
stop("MUST BE sp SpatialPointsDataFrame OR SpatialPolygonsDataFrame CLASS OBJECT")
na.index <- unique(as.data.frame(which(is.na(map@data),
arr.ind=TRUE))[,margin])
if(margin == 1) {
cat("DELETING ROWS: ", na.index, "\n")
return( map[-na.index,]  )
}
if(margin == 2) {
cat("DELETING COLUMNS: ", na.index, "\n")
return( map[,-na.index]  )
}
}
map <- sp.na.omit(map)
View(map)
# Map of Germany with already chosen and merged variables x (Deaths (number of
# deaths in each region in 2017)) and y (Population) and Fertility rate
map <-
readOGR(dsn = "spatial_data",
layer = "spatial_final",
stringsAsFactors = F)
map <- spTransform(map, "+proj=longlat")
# Remove all NA's in rows (and associated points)
sp.na.omit <- function(map, margin=1) {
if (!inherits(map, "SpatialPointsDataFrame") &
!inherits(map, "SpatialPolygonsDataFrame"))
stop("MUST BE sp SpatialPointsDataFrame OR SpatialPolygonsDataFrame CLASS OBJECT")
na.index <- unique(as.data.frame(which(is.na(map@data),
arr.ind=TRUE))[,margin])
if(margin == 1) {
cat("DELETING ROWS: ", na.index, "\n")
return( map[-na.index,]  )
}
if(margin == 2) {
cat("DELETING COLUMNS: ", na.index, "\n")
return( map[,-na.index]  )
}
}
map <- sp.na.omit(map)
View(map)
rm(list = ls())
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home5")
# Map of Germany with already chosen and merged variables x (Deaths (number of
# deaths in each region in 2017)) and y (Population) and Fertility rate
map <-
readOGR(dsn = "spatial_data",
layer = "spatial_final",
stringsAsFactors = F)
map <- spTransform(map, "+proj=longlat")
plot(map)
sgh_green <- rgb(13, 85, 72, 160, names = NULL, maxColorValue = 255)
# Visualise the number of Deaths in regions
pal <- colorRampPalette(c("white", sgh_green), bias = 1)
spplot(
map,
zcol = "Deaths",
colorkey = TRUE,
col.regions = pal(100),
cuts = 99,
cex = 0.5,
par.settings = list(axis.line = list(col =  'transparent')),
main = "Deaths"
)
# Number of deaths per 1000 people
map@data$deathspp <- map@data$Deaths / map@data$Popultn * 1000
thresholds <- c(seq(9, 13, 0.5))
spplot(
map,
zcol = "deathspp",
colorkey = list(labels = list(
breaks = seq(10, length(thresholds)), labels = thresholds
)),
col.regions = rainbow(99, start = 0.1),
cuts = length(thresholds),
cex = 0.5,
par.settings = list(axis.line = list(col =  'transparent')),
main = "Number of deaths per 1000 people"
)
attach(map@data)
library(spdep)
cont <- poly2nb(map, queen = T)
W_list <- nb2listw(cont, style = "W", zero.policy = T)
# Linear model
model1 <-
lm(deathspp ~ Popultn + Fertlty) # deaths per 1000 people explained by
# population and fertility rate
summary(model1)
lm.morantest(model1, listw = W_list, zero.policy = T)
lm.LMtests(model1, listw = W_list, test = "all", zero.policy = T)
# SAR: Spatial Lag - ML and TSLS
model2a <- lagsarlm(deathspp ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model2a)
res2a <- model2a$residuals
moran.test(res2a, listw = W_list, zero.policy = T)
# Tests for rho (LR and Wald) can be computed individually:
LR1.sarlm(model2a)
Wald1.sarlm(model2a)
model2b <-
stsls(Deaths ~ Popultn + Fertlty, listw = W_list)
model2b <-
stsls(Deaths ~ Popultn + Crimes, listw = W_list)
summary(model2b)
# SLX
W <- listw2mat(W_list)
X <- cbind(bezrobocie, wynagrodzenie)
X <- cbind(Deaths, Popultn, Fertlty)
WX <- W %*% X
lag.Deaths <- WX [, 1]
lag.Popultn <- WX [, 2]
lag.Fertlty <- WX [, 3]
model4a <-
lm(Deaths ~ Popultn + Fertlty)
summary(model4a)
lm.morantest(model4a, listw = W_list)
lm.LMtests(model4a, listw = W_list, test = "all")
model4a <-
lm(Deaths ~ Popultn + Fertlty + Crimes)
summary(model4a)
lm.morantest(model4a, listw = W_list)
model4a <-
lm(Deaths ~ Popultn + Fertlty)
summary(model4a)
lm.morantest(model4a, listw = W_list)
model4b <-
lmSLX(Deaths ~ Popultn + Fertlty, listw = W_list)
model4b <-
lmSLX(Deaths ~ Popultn + Fertlty)
model4b <-
lmSLX(Deaths ~ Popultn + Fertlty, listw = W_list)
summary(model4b)
model3b <-
GMerrorsar(Deaths ~ Popultn + Fertlty, listw = W_list)
summary(model3b)
# SEM: Spatial Error - ML and GLS
model3a <-
errorsarlm(Deaths ~ Popultn + Fertlty, listw = W_list)
summary(model3a)
res3a <- model3a$residuals
W_list[is.na(W_list)] <- 0
# Linear model
model1 <-
lm(deathspp ~ Popultn + Fertlty) # deaths per 1000 people explained by
# population and fertility rate
summary(model1)
lm.morantest(model1, listw = W_list, zero.policy = T)
lm.LMtests(model1, listw = W_list, test = "all", zero.policy = T)
# SAR: Spatial Lag - ML and TSLS
model2a <- lagsarlm(deathspp ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model2a)
res2a <- model2a$residuals
moran.test(res2a, listw = W_list, zero.policy = T)
# Tests for rho (LR and Wald) can be computed individually:
LR1.sarlm(model2a)
Wald1.sarlm(model2a)
model2b <-
stsls(Deaths ~ Popultn + Fertlty, listw = W_list)
summary(model2b)
model2b <-
stsls(Deaths ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model2b)
# SEM: Spatial Error - ML and GLS
model3a <-
errorsarlm(Deaths ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model3a)
res3a <- model3a$residuals
moran.test(res3a, listw = W_list)
moran.test(res3a, listw = W_list, zero.policy = T)
moran.test(res2b, listw = W_list)
moran.test(res2b, listw = W_list, zero.policy = T)
res2b <- model2b$residuals
moran.test(res2b, listw = W_list, zero.policy = T)
lm.LMtests(res2b, listw = W_list, test = "LMerr")
lm.LMtests(res2b, listw = W_list, test = "LMerr", zero.policy = T)
model3b <-
GMerrorsar(Deaths ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
X <- cbind(Deaths, Popultn, Fertlty, zero.policy = T)
WX <- W %*% X
lag.Deaths <- WX [, 1]
lag.Popultn <- WX [, 2]
lag.Fertlty <- WX [, 3]
model4 <-
lm(Deaths ~ Popultn + Fertlty)
summary(model4)
lm.morantest(model4, listw = W_list)
model4 <-
lm(Deaths ~ Popultn + Fertlty, zero.policy = T)
lm.morantest(model4, listw = W_list, zero.policy = T)
lm.LMtests(model4, listw = W_list, test = "all", zero.policy = T)
model4 <-
lm(Deaths ~ Popultn + Fertlty)
summary(model4)
lm.morantest(model4, listw = W_list, zero.policy = T)
lm.LMtests(model4, listw = W_list, test = "all", zero.policy = T)
# Linear model
model1 <-
lm(deathspp ~ Popultn + Fertlty) # deaths per 1000 people explained by
# population and fertility rate
summary(model1)
lm.morantest(model1, listw = W_list, zero.policy = T)
lm.LMtests(model1, listw = W_list, test = "all", zero.policy = T)
# SAR:
# maximum likelihood
model2a <- lagsarlm(deathspp ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model2a)
res2a <- model2a$residuals
moran.test(res2a, listw = W_list, zero.policy = T)
res2b <- model2b$residuals
# least squares
model2b <-
stsls(Deaths ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model2b)
res2b <- model2b$residuals
moran.test(res2b, listw = W_list, zero.policy = T)
lm.LMtests(res2b, listw = W_list, test = "LMerr", zero.policy = T)
moran.test(res2b, listw = W_list, zero.policy = T)
# least squares
model2b <-
stsls(Deaths ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model2b)
res2b <- model2b$residuals
moran.test(res2b, listw = W_list, zero.policy = T)
moran.test(res3a, listw = W_list, zero.policy = T)
lm.morantest(model4, listw = W_list, zero.policy = T)
# SEM:
# maximum likelihood
model3a <-
errorsarlm(Deaths ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model3a)
res3a <- model3a$residuals
moran.test(res3a, listw = W_list, zero.policy = T)
# least squares
model3b <-
GMerrorsar(Deaths ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model3b)
res3b <- model3b$residuals
moran.test(res3b, listw = W_list,zero.policy = T)
# SLX
W <- listw2mat(W_list)
X <- cbind(Deaths, Popultn, Fertlty, zero.policy = T)
WX <- W %*% X
lag.Deaths <- WX [, 1]
lag.Popultn <- WX [, 2]
lag.Fertlty <- WX [, 3]
model4 <-
lm(Deaths ~ Popultn + Fertlty)
summary(model4)
lm.morantest(model4, listw = W_list, zero.policy = T)
summary(model4)
lm.morantest(model4, listw = W_list, zero.policy = T)
# SAR: Spatial Lag
# maximum likelihood
model2a <- lagsarlm(deathspp ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model2a)
res2a <- model2a$residuals
moran.test(res2a, listw = W_list, zero.policy = T)
# least squares
model2b <-
stsls(Deaths ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model2b)
res2b <- model2b$residuals
moran.test(res2b, listw = W_list, zero.policy = T)
# SEM: Spatial Error
# maximum likelihood
model3a <-
errorsarlm(Deaths ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model3a)
res3a <- model3a$residuals
moran.test(res3a, listw = W_list, zero.policy = T)
# least squares
model3b <-
GMerrorsar(Deaths ~ Popultn + Fertlty, listw = W_list, zero.policy = T)
summary(model3b)
summary(model4)
library(readxl)
setwd("~/Desktop/SGH/2 semester/Big data/labs/10")
# clear the workspace, plots and console
rm(list = ls())
if(!is.null(dev.list())) dev.off()
cat("\014")
DATA <- read_excel("data.xls")
# rename columns
names(DATA) <- c("size", "cost", "fited", "nearcity", "class")
# checking the number of each group occurences
length(DATA$class[DATA$class == 2])   # 51
length(DATA$class[DATA$class == 1])   # 49
# bagging
library(ipred)
mod <- bagging(class ~ ., data = DATA, nbagg = 1000)   # nbagg - number of iterations
a <- predict(mod, newdata = DATA)
a <- round(a, 0)
wynik <- data.frame(a, DATA$class)
b <- sum(abs(a - DATA$class))
b
# random forest
library(randomForest)
mod <- randomForest(class ~ ., data = DATA, ntrees = 100)
a <- predict(mod, newdata = DATA)
a <- round(a, 0)
result <- data.frame(a, DATA$class)
b <- sum(abs(a - DATA$class))
b
View(DATA)
mod <- bagging(class ~ ., data = DATA, nbagg = 1000)   # nbagg - number of iterations
a <- predict(mod, newdata = DATA)
a <- round(a, 0)
wynik <- data.frame(a, DATA$class)
b <- sum(abs(a - DATA$class))
b
# random forest
library(randomForest)
forest <- randomForest(class ~ ., data = DATA, ntrees = 100)
a <- predict(forest, newdata = DATA)
a <- round(a, 0)
result <- data.frame(a, DATA$class)
b <- sum(abs(a - DATA$class))
b
