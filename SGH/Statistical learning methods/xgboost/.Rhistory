install_keras()
library(keras)
use_condaenv("r-tensorflow")
dataset_mnist()
library("kerasR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(keras)
use_condaenv("r-tensorflow")
dataset_mnist()
library(reticulate)
install.packages("reticulate")
install.packages("reticulate")
library(reticulate)
conda_remove("r-tensorflow")
library(keras)
install_keras()
library(keras)
install_keras(method = c("auto", "virtualenv", "conda"), conda = "auto",
tensorflow = "default", extra_packages = NULL)
use_python()
library(keras)
library(reticulate)
use_python('/opt/anaconda/anaconda3/envs/r-tensorflow/bin/python')
py_config()
dataset_mnist()
use_condaenv("r-tensorflow")
py_config()
dataset_mnist()
reticulate::py_discover_config("keras")
model <- keras_model_sequential()
reticulate::py_discover_config("tensorflow")
library(keras)
use_condaenv("r-tensorflow")
use_python()
use_condaenv("r-tensorflow")
use_python('/opt/anaconda/anaconda3/envs/r-tensorflow/bin/python')
dataset_mnist()
reticulate::py_discover_config("keras")
reticulate::py_discover_config("tensorflow")
load("~/Desktop/SGH/2 semester/Big data/books/deep-learning-with-r-notebooks-master/notebooks/.RData")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library("keras", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("kerasR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
train_images <- mnist$train$x
Sys.setenv(RETICULATE_PYTHON = "/anaconda3/envs/r-tensorflow/bin")
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "/anaconda3/envs/r-tensorflow/bin")
library(keras)
mnist <- dataset_mnist()
py_config()
library(reticulate)
sys <- import("sys")
sys$path
import("keras")
devtools::install_github("rstudio/tensorflow")
devtools::install_github("rstudio/keras")
tensorflow::install_tensorflow()
tensorflow::tf_config()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
strsplit(shell("set path",intern=TRUE),split=";")
use_condaenv("r-tensorflow")
use_python('/opt/anaconda/anaconda3/envs/r-tensorflow/bin/python')
dataset_mnist()
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
py_config()
reticulate::py_discover_config("tensorflow")
Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7")
py_config()
Sys.setenv(RETICULATE_PYTHON = "/anaconda3/envs/r-tensorflow/bin/python")
Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(devtools)
library(devtools)
devtools::install_github("rstudio/tensorflow")
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install_tensorflow()
library("keras", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
library("kerasR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7")
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
gcc --version
install.packages("keras")
install.packages("keras")
use_python("/usr/local/bin/python3")
library("keras", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("kerasR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
use_python("/usr/local/bin/python3")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
use_python(python = "/usr/bin/python3", required = TRUE)
use_python(python = "/usr/bin/python3.7.2", required = TRUE)
#Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7")
#Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7")
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
use_python(python = "/usr/bin/python3.7.2", required = TRUE)
library(keras)
mnist <- dataset_mnist()
use_python(python = "/usr/bin/python3.7", required = TRUE)
use_python(python = "/usr/bin/python3.7.2", required = TRUE)
use_python(python = "/usr/bin/python", required = TRUE)
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2
use_python(python = "/usr/bin/python", required = TRUE)
library(keras)
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
library(keras)
mnist <- dataset_mnist()
install_keras()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
mnist <- dataset_mnist()
devtools::install_github("rstudio/keras")
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
reticulate::py_discover_config("keras")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
use_python(python = "/usr/bin/python", required = TRUE)
library(keras)
mnist <- dataset_mnist()
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
use_python(python = "/usr/bin/python", required = TRUE)
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7")
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
use_python(python = "/usr/bin/python3", required = TRUE)
use_python(python = "/usr/bin/python 3.7.2", required = TRUE)
use_python(python = "/usr/bin/python", required = TRUE)
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
reticulate::py_discover_config("keras")
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
reticulate::py_discover_config("keras")
library(keras)
mnist <- dataset_mnist()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
reticulate::py_discover_config("tensorflow")
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
reticulate::py_discover_config("keras")
reticulate::py_discover_config("tensorflow")
# Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7")
use_python('/opt/anaconda/anaconda3/envs/r-tensorflow/bin/python')
library(keras)
mnist <- dataset_mnist()
use_python(python = "/usr/bin/python", required = TRUE)
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
use_python(python = "/usr/bin/python3", required = TRUE)
use_python(python = "/usr/bin/python3.7.2", required = TRUE)
use_python(python = "/usr/bin/python", required = TRUE)
use_python(python = "/usr/bin/python3", required = TRUE)
use_python(python = "/usr/bin/python3", required = TRUE)
Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2
use_python(python = "/usr/bin/python3.7.2", required = TRUE)
library(keras)
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
library(keras)
mnist <- dataset_mnist()
library(reticulate)
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2
py_config()
py_config()
use_python(python = Sys.which("python3"), required = TRUE)
tensorflow::install_tensorflow()
py_config()
Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2
py_config()
reticulate::py_discover_config("keras")
py_config()
use_python(python = "/usr/bin/python3.7.2", required = TRUE)
library(reticulate)
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
# Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7.2")
py_config()
Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2
py_config()
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
library(keras)
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
# Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
# Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7.2")
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
py_config()
library(keras)
mnist <- dataset_mnist()
library(reticulate)
py_config()
# -------------------------------------------------------------------
library(reticulate)
# Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
# Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7.2")
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
library(keras)
mnist <- dataset_mnist()
# Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
# Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7.2")
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
# Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
# Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7.2")
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
py_config()
# -------------------------------------------------------------------
library(reticulate)
# Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
# Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7.2")
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
library(keras)
mnist <- dataset_mnist()
# -------------------------------------------------------------------
library(reticulate)
# Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
# Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7.2")
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
# Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
# Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7.2")
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
# Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
# Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7.2")
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
py_config()
library(keras)
mnist <- dataset_mnist()
Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2
py_config()
use_python(python = Sys.which("python3"), required = TRUE)
# !!!! -------------------------------------------------------------------
library(reticulate)
# Sys.setenv(RETICULATE_PYTHON = "/Macintosh HD/Applications/Python 3.7.2")
# Sys.setenv(RETICULATE_PYTHON = "/anaconda3/lib/python3.7.2")
Sys.setenv(RETICULATE_PYTHON = "/usr/local/bin/python3")
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
reticulate::py_discover_config("keras")
devtools::install_github("rstudio/keras")
reticulate::py_discover_config("keras")
reticulate::py_discover_config("tensorflow")
library(keras)
mnist <- dataset_mnist()
use_python(python = Sys.which("python3"), required = TRUE)
py_config()
library(keras)
install_tensorflow()
install_tensorflow()
devtools::install_github("rstudio/tensorflow")
# Read in MNIST data
mnist <- dataset_mnist()
install_tensorflow()
library(tensorflow)
install_tensorflow()
library(keras)
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
# Read in MNIST data
mnist <- dataset_mnist()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
View(mnist)
str(train_images)
str(train_labels)
str(test_images)
str(test_labels)
network <- keras_model_sequential() %>%
layer_dense(units = 512, activation = "relu", input_shape = c(28 * 28)) %>%
layer_dense(units = 10, activation = "softmax")
network %>% compile(
optimizer = "rmsprop",
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
train_images <- array_reshape(train_images, c(60000, 28 * 28))
train_images <- train_images / 255
test_images <- array_reshape(test_images, c(10000, 28 * 28))
test_images <- test_images / 255
train_labels <- to_categorical(train_labels)
test_labels <- to_categorical(test_labels)
View(train_labels)
network %>% fit(train_images, train_labels, epochs = 5, batch_size = 128)
metrics <- network %>% evaluate(test_images, test_labels, verbose = 0)
metrics
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
system.time(m <- matrix(rnorm(10000^2), ncol=10000))
m
system.time(m[lower.tri(m)] <- 0)
system.time(sum(m))
View(m)
rm(list=ls())
require(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
str(train)
dim(train$data)
dim(test$data)
class(train$data)[1]
rm(list=ls())
require(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
dim(train$data)
dim(test$data)
class(train$data)[1]
class(train$label)
bstSparse <- xgboost(data = train$data, label = train$label, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
bstDense <- xgboost(data = as.matrix(train$data), label = train$label, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
dtrain <- xgb.DMatrix(data = train$data, label = train$label)
bstDMatrix <- xgboost(data = dtrain, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
View(train)
# verbose = 0, no message
bst <- xgboost(data = dtrain, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic", verbose = 0)
# verbose = 1, print evaluation metric
bst <- xgboost(data = dtrain, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic", verbose = 1)
# verbose = 2, also print information about tree
bst <- xgboost(data = dtrain, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic", verbose = 2)
pred <- predict(bst, test$data)
# size of the prediction vector
print(length(pred))
# limit display of predictions to the first 10
print(head(pred))
prediction <- as.numeric(pred > 0.5)
print(head(prediction))
err <- mean(as.numeric(pred > 0.5) != test$label)
print(paste("test-error=", err))
watchlist <- list(train=dtrain, test=dtest)
dtrain <- xgb.DMatrix(data = train$data, label=train$label)
dtest <- xgb.DMatrix(data = test$data, label=test$label)
watchlist <- list(train=dtrain, test=dtest)
bst <- xgb.train(data=dtrain, max.depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = "binary:logistic")
bst <- xgb.train(data=dtrain, max.depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, eval.metric = "error", eval.metric = "logloss", objective = "binary:logistic")
bst <- xgb.train(data=dtrain, booster = "gblinear", max.depth=2, nthread = 2, nrounds=2, watchlist=watchlist, eval.metric = "error", eval.metric = "logloss", objective = "binary:logistic")
xgb.DMatrix.save(dtrain, "dtrain.buffer")
setwd("~/Desktop/SGH/2 semester/Statistical learning methods/xgboost")
setwd("~/Desktop/SGH/2 semester/Statistical learning methods/xgboost")
xgb.DMatrix.save(dtrain, "dtrain.buffer")
# to load it in, simply call xgb.DMatrix
dtrain2 <- xgb.DMatrix("dtrain.buffer")
bst <- xgb.train(data=dtrain2, max.depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = "binary:logistic")
label = getinfo(dtest, "label")
pred <- predict(bst, dtest)
err <- as.numeric(sum(as.integer(pred > 0.5) != label))/length(label)
print(paste("test-error=", err))
## [1] "test-error= 0.0217256362507759"
## [1] "test-error= 0.0217256362507759"
importance_matrix <- xgb.importance(model = bst)
print(importance_matrix)
xgb.plot.importance(importance_matrix = importance_matrix)
xgb.plot.importance(importance_matrix = importance_matrix)
xgb.dump(bst, with.stats = T)
xgb.plot.tree(model = bst)
install.packages("DiagrammeR")
xgb.plot.tree(model = bst)
# save model to binary local file
xgb.save(bst, "xgboost.model")
# load binary model to R
bst2 <- xgb.load("xgboost.model")
pred2 <- predict(bst2, test$data)
# And now the test
print(paste("sum(abs(pred2-pred))=", sum(abs(pred2-pred))))
# save model to R's raw vector
rawVec <- xgb.save.raw(bst)
# print class
print(class(rawVec))
## [1] "raw"
# load binary model to R
bst3 <- xgb.load(rawVec)
pred3 <- predict(bst3, test$data)
# pred3 should be identical to pred
print(paste("sum(abs(pred3-pred))=", sum(abs(pred3-pred))))
## [1] "sum(abs(pred3-pred))= 0"
