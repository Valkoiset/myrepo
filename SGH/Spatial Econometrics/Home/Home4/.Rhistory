knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(keras)
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
system.time(m <- matrix(rnorm(10000^2), ncol=10000))
m
system.time(m[lower.tri(m)] <- 0)
system.time(sum(m))
View(m)
rm(list=ls())
require(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
str(train)
dim(train$data)
dim(test$data)
library(BCA)
library(relimp)
library(car)
library(RcmdrMisc)
library(foreign)
library(corrplot)
library(dplyr)
# Loading data
Wesbrook <- read.dbf("~/Desktop/SGH/2 semester/Big data/labs/4/Wesbrook.dbf", as.is=FALSE)
variable.summary(Wesbrook)
# Removing some variables
Wesbrook <- within(Wesbrook, {
ID <- NULL
INDUPDT <- NULL
BIGBLOCK <- NULL # 1 level factor variable
MARITAL <- NULL
MAJOR1 <- NULL
})
# Creating numerical variable from factor variable WESBROOK
Wesbrook <- within(Wesbrook, {
WESBROOK <- Recode(WESBROOK, '"Y"=1; "N"=0', as.factor=FALSE)
})
# Creating estimation and validation subsets
set.seed(323)
Wesbrook$Sample <- create.samples(Wesbrook, est = 0.7, val = 0.3)
# Excluding all NA from Wesbrook
Wesbrook <- na.exclude(Wesbrook)
# Checking if there are still some NA values
any(is.na(Wesbrook))
# Generalized linear model after excluding some variables
GLM <- glm(WESBROOK ~ . , family=binomial(logit), data=Wesbrook)
summary(GLM)
variable.summary(GLM)
variable.summary(Wesbrook)
summary(GLM)
Wesbrook$DEPT1 <- as.numeric(Wesbrook$DEPT1)
Wesbrook$FACULTY1 <- as.numeric(Wesbrook$FACULTY1)
# Generalized linear model after excluding some variables
GLM <- glm(WESBROOK ~ . , family=binomial(logit), data=Wesbrook)
summary(GLM)
variable.summary(Wesbrook)
# R2 McFadden value
1 - (GLM$deviance/GLM$null.deviance) # 0.7724513
# Selecting 70% of observations for training model
Wesbrook.est <- Wesbrook %>% filter(Sample == "Estimation")
# Selecting only statistically significant variables and dependent one
Wesbrook.est <- Wesbrook.est[, c("TOTLGIVE", "PARENT", "CHILD", "OTHERACT", "WESBROOK")]
rm(list=ls())                      # clean environment
if(!is.null(dev.list())) dev.off() # clean all plots
cat("\014")                        # clean console
# Loading data
Wesbrook <- read.dbf("~/Desktop/SGH/2 semester/Big data/labs/4/Wesbrook.dbf", as.is=FALSE)
variable.summary(Wesbrook)
# Removing some variables
Wesbrook <- within(Wesbrook, {
ID <- NULL
INDUPDT <- NULL
BIGBLOCK <- NULL # 1 level factor variable
MARITAL <- NULL
MAJOR1 <- NULL
})
# Creating numerical variable from factor variable WESBROOK
Wesbrook <- within(Wesbrook, {
WESBROOK <- Recode(WESBROOK, '"Y"=1; "N"=0', as.factor=FALSE)
})
# Creating estimation and validation subsets
set.seed(323)
Wesbrook$Sample <- create.samples(Wesbrook, est = 0.7, val = 0.3)
# Excluding all NA from Wesbrook
Wesbrook <- na.exclude(Wesbrook)
# Checking if there are still some NA values
any(is.na(Wesbrook))
# Generalized linear model after excluding some variables
GLM <- glm(WESBROOK ~ . , family=binomial(logit), data=Wesbrook)
summary(GLM)
# R2 McFadden value
1 - (GLM$deviance/GLM$null.deviance) # 0.7724513
# Selecting 70% of observations for training model
Wesbrook.est <- Wesbrook %>% filter(Sample == "Estimation")
# Selecting only statistically significant variables and dependent one
Wesbrook.est <- Wesbrook.est[, c("TOTLGIVE", "PARENT", "CHILD", "OTHERACT", "WESBROOK")]
# Generalized linear model after excluding all insignificant variables
GLM2 <- glm(WESBROOK ~ . , family=binomial(logit), data = Wesbrook.est)
summary(GLM2)
1 - (GLM2$deviance/GLM2$null.deviance) # 0.720267
# Creating Log columns
Wesbrook.est$LogTOTLGIVE <- with(Wesbrook.est, log(TOTLGIVE))
# Model after transforming numerical columns to logs
GLM3<- glm(WESBROOK ~ LogTOTLGIVE + PARENT + CHILD + OTHERACT, family = binomial(logit), data = Wesbrook.est)
summary(GLM3)
1 - (GLM3$deviance/GLM3$null.deviance) # 0.7502665
library(BCA)
library(relimp)
library(car)
library(RcmdrMisc)
# Loading CCS dataset from BCA package
data(CCS, package="BCA")
# Creating validation and estimation subsets
set.seed(321)
CCS$Sample <- create.samples(CCS, est = 0.7, val = 0.3)
View(CCS)
# Creating numerical variable from factor variable MonthsGive
CCS <- within(CCS, {
MonthGive.Num <- Recode(MonthGive, '"Yes"=1; "No"=0', as.factor=FALSE) # Recode changes values from yes/no to 1/0
})
# Variables distribution chart
scatterplot(MonthGive.Num~AveDonAmt, reg.line=lm, smooth=TRUE,
id.n = 2, boxplots='xy', span=0.5, data=CCS)
# Means chart for Region variable
with(CCS, plotMeans(MonthGive.Num, Region, error.bars="none")) # plotmeans plots mean values of variables
# Reorganizing levels of Region factor variable
CCS$NRegion <- relabel.factor(CCS$Region, new.labels=c('NR1','NR1','NR1',
'NR2','NR2','NR2'))
with(CCS, plotMeans(MonthGive.Num, NRegion))
# Generalized linear model
GLM.2 <- glm(MonthGive ~ Age20t29 +Age20t39 + Age60pls + Age70pls + Age80pls +
AveDonAmt + AveIncEA + DonPerYear + EngPrmLang + FinUnivP + LastDonAmt +
NewDonor+NRegion, family=binomial(logit), data=CCS)
variable.summary(GLM.2)
variable.summary(CCS)
library(BCA)
library(relimp)
library(car)
library(RcmdrMisc)
library(foreign)
library(corrplot)
library(dplyr)
rm(list=ls())                      # clean environment
if(!is.null(dev.list())) dev.off() # clean all plots
cat("\014")                        # clean console
# Loading data
Wesbrook <- read.dbf("~/Desktop/SGH/2 semester/Big data/labs/4/Wesbrook.dbf", as.is=FALSE)
variable.summary(Wesbrook)
# Removing some variables
Wesbrook <- within(Wesbrook, {
ID <- NULL
INDUPDT <- NULL
BIGBLOCK <- NULL # 1 level factor variable
MARITAL <- NULL
MAJOR1 <- NULL
})
# Removing some variables
Wesbrook <- within(Wesbrook, {
ID <- NULL
INDUPDT <- NULL
BIGBLOCK <- NULL # 1 level factor variable
MARITAL <- NULL
MAJOR1 <- NULL
})
variable.summary(Wesbrook)
PARENT <- Recode(PARENT, '"Y"=1; "N"=0', as.factor=FALSE)
View(Wesbrook)
# Creating numerical variable from factor variable WESBROOK
Wesbrook <- within(Wesbrook, {
WESBROOK <- Recode(WESBROOK, '"Y"=1; "N"=0', as.factor=FALSE)
PARENT <- Recode(PARENT, '"Y"=1; "N"=0', as.factor=FALSE)
})
OTHERACT <- Recode(OTHERACT, '"Y"=1; "N"=0', as.factor=FALSE)
# Creating numerical variable from factor variable WESBROOK
Wesbrook <- within(Wesbrook, {
WESBROOK <- Recode(WESBROOK, '"Y"=1; "N"=0', as.factor=FALSE)
PARENT <- Recode(PARENT, '"Y"=1; "N"=0', as.factor=FALSE)
CHILD <- Recode(CHILD, '"Y"=1; "N"=0', as.factor=FALSE)
SPOUSE <- Recode(SPOUSE, '"Y"=1; "N"=0', as.factor=FALSE)
SEX <- Recode(SEX, '"Y"=1; "N"=0', as.factor=FALSE)
FACSTAFF <- Recode(FACSTAFF, '"Y"=1; "N"=0', as.factor=FALSE)
ATHLTCS <- Recode(ATHLTCS, '"Y"=1; "N"=0', as.factor=FALSE)
OTHERACT <- Recode(OTHERACT, '"Y"=1; "N"=0', as.factor=FALSE)
})
# Creating estimation and validation subsets
set.seed(323)
Wesbrook$Sample <- create.samples(Wesbrook, est = 0.7, val = 0.3)
# Excluding all NA from Wesbrook
Wesbrook <- na.exclude(Wesbrook)
# Checking if there are still some NA values
any(is.na(Wesbrook))
# Generalized linear model after excluding some variables
GLM <- glm(WESBROOK ~ . , family=binomial(logit), data=Wesbrook)
summary(GLM)
# R2 McFadden value
1 - (GLM$deviance/GLM$null.deviance) # 0.7724513
rm(list=ls())                      # clean environment
if(!is.null(dev.list())) dev.off() # clean all plots
cat("\014")                        # clean console
# Loading data
Wesbrook <- read.dbf("~/Desktop/SGH/2 semester/Big data/labs/4/Wesbrook.dbf", as.is=FALSE)
# Removing some variables
Wesbrook <- within(Wesbrook, {
ID <- NULL
INDUPDT <- NULL
BIGBLOCK <- NULL # 1 level factor variable
MARITAL <- NULL
MAJOR1 <- NULL
})
# Creating numerical variable from factor variable WESBROOK
Wesbrook <- within(Wesbrook, {
WESBROOK <- Recode(WESBROOK, '"Y"=1; "N"=0', as.factor=FALSE)
# PARENT <- Recode(PARENT, '"Y"=1; "N"=0', as.factor=FALSE)
# CHILD <- Recode(CHILD, '"Y"=1; "N"=0', as.factor=FALSE)
# SPOUSE <- Recode(SPOUSE, '"Y"=1; "N"=0', as.factor=FALSE)
# SEX <- Recode(SEX, '"Y"=1; "N"=0', as.factor=FALSE)
# FACSTAFF <- Recode(FACSTAFF, '"Y"=1; "N"=0', as.factor=FALSE)
# ATHLTCS <- Recode(ATHLTCS, '"Y"=1; "N"=0', as.factor=FALSE)
# OTHERACT <- Recode(OTHERACT, '"Y"=1; "N"=0', as.factor=FALSE)
})
rm(list=ls())                      # clean environment
if(!is.null(dev.list())) dev.off() # clean all plots
cat("\014")                        # clean console
# Loading data
Wesbrook <- read.dbf("~/Desktop/SGH/2 semester/Big data/labs/4/Wesbrook.dbf", as.is=FALSE)
# Removing some variables
Wesbrook <- within(Wesbrook, {
ID <- NULL
INDUPDT <- NULL
BIGBLOCK <- NULL # 1 level factor variable
MARITAL <- NULL
MAJOR1 <- NULL
})
# Creating estimation and validation subsets
set.seed(323)
Wesbrook$Sample <- create.samples(Wesbrook, est = 0.7, val = 0.3)
# Excluding all NA from Wesbrook
Wesbrook <- na.exclude(Wesbrook)
# Checking if there are still some NA values
any(is.na(Wesbrook))
# Generalized linear model after excluding some variables
GLM <- glm(WESBROOK ~ . , family=binomial(logit), data=Wesbrook)
summary(GLM)
# R2 McFadden value
1 - (GLM$deviance/GLM$null.deviance) # 0.7724513
rm(list=ls())                      # clean environment
if(!is.null(dev.list())) dev.off() # clean all plots
cat("\014")                        # clean console
# Loading data
Wesbrook <- read.dbf("~/Desktop/SGH/2 semester/Big data/labs/4/Wesbrook.dbf", as.is=FALSE)
# Removing some variables
Wesbrook <- within(Wesbrook, {
ID <- NULL
INDUPDT <- NULL
BIGBLOCK <- NULL # 1 level factor variable
MARITAL <- NULL
MAJOR1 <- NULL
})
# Creating numerical variable from factor variable WESBROOK
Wesbrook <- within(Wesbrook, {
WESBROOK <- Recode(WESBROOK, '"Y"=1; "N"=0', as.factor = F)
})
# Creating estimation and validation subsets
set.seed(323)
Wesbrook$Sample <- create.samples(Wesbrook, est = 0.7, val = 0.3)
# Excluding all NA from Wesbrook
Wesbrook <- na.exclude(Wesbrook)
# Checking if there are still some NA values
any(is.na(Wesbrook))
# Generalized linear model after excluding some variables
GLM <- glm(WESBROOK ~ . , family=binomial(logit), data=Wesbrook)
summary(GLM)
# R2 McFadden value
1 - (GLM$deviance/GLM$null.deviance) # 0.7724513
# Selecting 70% of observations for training model
Wesbrook.est <- Wesbrook %>% filter(Sample == "Estimation")
# Selecting only statistically significant variables and dependent one
Wesbrook.est <- Wesbrook.est[, c("TOTLGIVE", "PARENT", "CHILD", "OTHERACT", "WESBROOK")]
# Generalized linear model after excluding all insignificant variables
GLM2 <- glm(WESBROOK ~ . , family=binomial(logit), data = Wesbrook.est)
summary(GLM2)
1 - (GLM2$deviance/GLM2$null.deviance) # 0.720267
# Creating Log columns
Wesbrook.est$LogTOTLGIVE <- with(Wesbrook.est, log(TOTLGIVE))
# Model after transforming numerical columns to logs
GLM3<- glm(WESBROOK ~ LogTOTLGIVE + PARENT + CHILD + OTHERACT, family = binomial(logit), data = Wesbrook.est)
summary(GLM3)
1 - (GLM3$deviance/GLM3$null.deviance) # 0.7502665
for (i in 1:10) {
print(i)
}
library(BCA)
library(relimp)
library(car)
library(RcmdrMisc)
library(foreign)
library(corrplot)
library(dplyr)
rm(list=ls())                      # clean environment
if(!is.null(dev.list())) dev.off() # clean all plots
cat("\014")                        # clean console
# Loading data
Wesbrook <- read.dbf("~/Desktop/SGH/2 semester/Big data/labs/4/Wesbrook.dbf", as.is=FALSE)
variable.summary(Wesbrook)
rm(list=ls())                      # clean environment
if(!is.null(dev.list())) dev.off() # clean all plots
cat("\014")                        # clean console
# Loading data
Wesbrook <- read.dbf("~/Desktop/SGH/2 semester/Big data/labs/4/Wesbrook.dbf", as.is=FALSE)
variable.summary(Wesbrook)
View(Wesbrook)
summary(Wesbrook)
summarise(Wesbrook)
?variable.summary
library(sp)
library(rgdal)
library(spdep)
library(geospacom)
library(RColorBrewer)
rm(list=ls())
# LOAD PREVIOUS DATA
# spatial_data <- readOGR(dsn="spatial_data", layer="spatial_final", stringsAsFactors = F)
set.seed(323)
# SELECT THE DESIRED SPATIAL OBJECTS (kindergartens from all germany regions)
# Germany:
# Baden-Württemberg
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Baden-Württemberg")
BadenWürttemberg <- readOGR(".", "gis_osm_pois_a_free_1")
BadenWürttemberg <- spTransform(map, "+proj=longlat")
BadenWürttemberg <- Baden-Württemberg[Baden-Württemberg@data$fclass == "kindergarten",]
# Bayern
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Bayern")
Bayern <- readOGR(".", "gis_osm_pois_a_free_1")
Bayern <- spTransform(map, "+proj=longlat")
Bayern <- Bayern[Bayern@data$fclass == "kindergarten",]
# Berlin
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Berlin")
Berlin <- readOGR(".", "gis_osm_pois_a_free_1")
Berlin <- spTransform(map, "+proj=longlat")
Berlin <- Berlin[Berlin@data$fclass == "kindergarten",]
# Brandenburg (mit Berlin)
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Brandenburg (mit Berlin)")
Brandenburg <- readOGR(".", "gis_osm_pois_a_free_1")
Brandenburg <- spTransform(map, "+proj=longlat")
Brandenburg <- Brandenburg[Brandenburg@data$fclass == "kindergarten",]
# Bremen
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Bremen")
Bremen <- readOGR(".", "gis_osm_pois_a_free_1")
Bremen <- spTransform(map, "+proj=longlat")
Bremen <- Bremen[Bremen@data$fclass == "kindergarten",]
# Hamburg
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Hamburg")
Hamburg <- readOGR(".", "gis_osm_pois_a_free_1")
Hamburg <- spTransform(map, "+proj=longlat")
Hamburg <- Hamburg[Hamburg@data$fclass == "kindergarten",]
# Hessen
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Hessen")
Hessen <- readOGR(".", "gis_osm_pois_a_free_1")
Hessen <- spTransform(map, "+proj=longlat")
Hessen <- Hessen[Hessen@data$fclass == "kindergarten",]
# Mecklenburg-Vorpommern
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Mecklenburg-Vorpommern")
MecklenburgVorpommern <- readOGR(".", "gis_osm_pois_a_free_1")
MecklenburgVorpommern <- spTransform(map, "+proj=longlat")
MecklenburgVorpommern <- MecklenburgVorpommern[MecklenburgVorpommern@data$fclass == "kindergarten",]
# Niedersachsen
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Niedersachsen")
Niedersachsen <- readOGR(".", "gis_osm_pois_a_free_1")
Niedersachsen <- spTransform(map, "+proj=longlat")
Niedersachsen <- Niedersachsen[Niedersachsen@data$fclass == "kindergarten",]
# Nordrhein-Westfalen
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Nordrhein-Westfalen")
NordrheinWestfalen <- readOGR(".", "gis_osm_pois_a_free_1")
NordrheinWestfalen <- spTransform(map, "+proj=longlat")
NordrheinWestfalen <- NordrheinWestfalen[NordrheinWestfalen@data$fclass == "kindergarten",]
# Rheinland-Pfalz
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Rheinland-Pfalz")
RheinlandPfalz <- readOGR(".", "gis_osm_pois_a_free_1")
RheinlandPfalz <- spTransform(map, "+proj=longlat")
RheinlandPfalz <- RheinlandPfalz[RheinlandPfalz@data$fclass == "kindergarten",]
# Saarland
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Saarland")
Saarland <- readOGR(".", "gis_osm_pois_a_free_1")
Saarland <- spTransform(map, "+proj=longlat")
Saarland <- Saarland[Saarland@data$fclass == "kindergarten",]
# Sachsen
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Sachsen")
Sachsen <- readOGR(".", "gis_osm_pois_a_free_1")
Sachsen <- spTransform(map, "+proj=longlat")
Sachsen <- Sachsen[Sachsen@data$fclass == "kindergarten",]
# Sachsen-Anhalt
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Sachsen-Anhalt")
SachsenAnhalt <- readOGR(".", "gis_osm_pois_a_free_1")
SachsenAnhalt <- spTransform(map, "+proj=longlat")
SachsenAnhalt <- SachsenAnhalt[SachsenAnhalt@data$fclass == "kindergarten",]
# Schleswig-Holstein
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Schleswig-Holstein")
SchleswigHolstein <- readOGR(".", "gis_osm_pois_a_free_1")
SchleswigHolstein <- spTransform(map, "+proj=longlat")
SchleswigHolstein <- SchleswigHolstein[SchleswigHolstein@data$fclass == "kindergarten",]
# Thüringen
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Thüringen")
Thüringen <- readOGR(".", "gis_osm_pois_a_free_1")
Thüringen <- spTransform(map, "+proj=longlat")
Thüringen <- Thüringen[Thüringen@data$fclass == "kindergarten",]
rm(list=ls())
# LOAD PREVIOUS DATA
# spatial_data <- readOGR(dsn="spatial_data", layer="spatial_final", stringsAsFactors = F)
set.seed(323)
# SELECT THE DESIRED SPATIAL OBJECTS (kindergartens from all germany regions)
# Germany:
# Baden-Württemberg
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Baden-Württemberg")
BadenWürttemberg <- readOGR(".", "gis_osm_pois_a_free_1")
BadenWürttemberg <- spTransform(BadenWürttemberg, "+proj=longlat")
BadenWürttemberg <- Baden-Württemberg[Baden-Württemberg@data$fclass == "kindergarten",]
BadenWürttemberg <- spTransform(BadenWürttemberg, "+proj=longlat")
BadenWürttemberg <- spTransform(BadenWürttemberg, "+proj=longlat")
BadenWürttemberg <- BadenWürttemberg[BadenWürttemberg@data$fclass == "kindergarten",]
# Bayern
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Bayern")
Bayern <- readOGR(".", "gis_osm_pois_a_free_1")
Bayern <- spTransform(Bayern, "+proj=longlat")
Bayern <- Bayern[Bayern@data$fclass == "kindergarten",]
# Berlin
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Berlin")
Berlin <- readOGR(".", "gis_osm_pois_a_free_1")
Berlin <- spTransform(Berlin, "+proj=longlat")
Berlin <- Berlin[Berlin@data$fclass == "kindergarten",]
# Brandenburg (mit Berlin)
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Brandenburg (mit Berlin)")
Brandenburg <- readOGR(".", "gis_osm_pois_a_free_1")
Brandenburg <- spTransform(Brandenburg, "+proj=longlat")
Brandenburg <- Brandenburg[Brandenburg@data$fclass == "kindergarten",]
# Bremen
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Bremen")
Bremen <- readOGR(".", "gis_osm_pois_a_free_1")
Bremen <- spTransform(Bremen, "+proj=longlat")
Bremen <- Bremen[Bremen@data$fclass == "kindergarten",]
# Hamburg
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Hamburg")
Hamburg <- readOGR(".", "gis_osm_pois_a_free_1")
Hamburg <- spTransform(Hamburg, "+proj=longlat")
Hamburg <- Hamburg[Hamburg@data$fclass == "kindergarten",]
# Hessen
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Hessen")
Hessen <- readOGR(".", "gis_osm_pois_a_free_1")
Hessen <- spTransform(Hessen, "+proj=longlat")
Hessen <- Hessen[Hessen@data$fclass == "kindergarten",]
# Mecklenburg-Vorpommern
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Mecklenburg-Vorpommern")
MecklenburgVorpommern <- readOGR(".", "gis_osm_pois_a_free_1")
MecklenburgVorpommern <- spTransform(MecklenburgVorpommern, "+proj=longlat")
MecklenburgVorpommern <- MecklenburgVorpommern[MecklenburgVorpommern@data$fclass == "kindergarten",]
# Niedersachsen
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Niedersachsen")
Niedersachsen <- readOGR(".", "gis_osm_pois_a_free_1")
Niedersachsen <- spTransform(Niedersachsen, "+proj=longlat")
Niedersachsen <- Niedersachsen[Niedersachsen@data$fclass == "kindergarten",]
# Nordrhein-Westfalen
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Nordrhein-Westfalen")
NordrheinWestfalen <- readOGR(".", "gis_osm_pois_a_free_1")
NordrheinWestfalen <- spTransform(NordrheinWestfalen, "+proj=longlat")
NordrheinWestfalen <- NordrheinWestfalen[NordrheinWestfalen@data$fclass == "kindergarten",]
# Rheinland-Pfalz
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Rheinland-Pfalz")
RheinlandPfalz <- readOGR(".", "gis_osm_pois_a_free_1")
RheinlandPfalz <- spTransform(RheinlandPfalz, "+proj=longlat")
RheinlandPfalz <- RheinlandPfalz[RheinlandPfalz@data$fclass == "kindergarten",]
# Saarland
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Saarland")
Saarland <- readOGR(".", "gis_osm_pois_a_free_1")
Saarland <- spTransform(Saarland, "+proj=longlat")
Saarland <- Saarland[Saarland@data$fclass == "kindergarten",]
# Sachsen
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Sachsen")
Sachsen <- readOGR(".", "gis_osm_pois_a_free_1")
Sachsen <- spTransform(Sachsen, "+proj=longlat")
Sachsen <- Sachsen[Sachsen@data$fclass == "kindergarten",]
# Sachsen-Anhalt
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Sachsen-Anhalt")
SachsenAnhalt <- readOGR(".", "gis_osm_pois_a_free_1")
SachsenAnhalt <- spTransform(SachsenAnhalt, "+proj=longlat")
SachsenAnhalt <- SachsenAnhalt[SachsenAnhalt@data$fclass == "kindergarten",]
# Schleswig-Holstein
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Schleswig-Holstein")
SchleswigHolstein <- readOGR(".", "gis_osm_pois_a_free_1")
SchleswigHolstein <- spTransform(SchleswigHolstein, "+proj=longlat")
SchleswigHolstein <- SchleswigHolstein[SchleswigHolstein@data$fclass == "kindergarten",]
# Thüringen
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4/shp files/Thüringen")
Thüringen <- readOGR(".", "gis_osm_pois_a_free_1")
Thüringen <- spTransform(Thüringen, "+proj=longlat")
Thüringen <- Thüringen[Thüringen@data$fclass == "kindergarten",]
map2 <- rbind(BadenWürttemberg, Bayern, Berlin, Brandenburg, Bremen, Hamburg,
Hessen, MecklenburgVorpommern, Niedersachsen, NordrheinWestfalen,
RheinlandPfalz, Saarland, Sachsen, SachsenAnhalt, SchleswigHolstein,
Thüringen)
plot(map2)
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4")
setwd("~/Desktop/SGH/2 semester/Spatial Econometrics/Home/Home4")
writeOGR(obj=map2, dsn="germany", layer="spatial_final",
driver="ESRI Shapefile")
writeOGR(obj=map2, dsn="germany", layer="germany",
driver="ESRI Shapefile")
